/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT	FALSE						0
#DEFINE_CONSTANT	TRUE						1

#DEFINE_CONSTANT	STACKSIZE					5

#DEFINE_CONSTANT	SCROLLPAGESIZE				3

#DEFINE_CONSTANT	MAXHOSTNAMELENGTH			64
#DEFINE_CONSTANT	MAXMACADDRESSLENGTH			17

#DEFINE_CONSTANT	IPOCTETOPTIONS				8		//Number of different IP Settings which require editing octets (IP Address, Mask, Router)
#DEFINE_CONSTANT	IPOPTIONS					7		//Number of different IP Settings that could be changed which would require a reboot

#DEFINE_CONSTANT	MENUMAIN					1
//#DEFINE_CONSTANT	MENUMAINDHCPON				2
#DEFINE_CONSTANT	MENUOCTETSETUP				3
#DEFINE_CONSTANT	MENUMACADDRESS				4
#DEFINE_CONSTANT	MENUDHCP					5
#DEFINE_CONSTANT	MENUHOSTNAME				6
#DEFINE_CONSTANT	MENUPEERIPID				7
#DEFINE_CONSTANT	MENUOCTETVIEW				8
#DEFINE_CONSTANT	MENUREBOOT					9
#DEFINE_CONSTANT	MENURETRIEVINGSETTINGS		10
#DEFINE_CONSTANT	MENUDNS						11
#DEFINE_CONSTANT	MENUUPDATINGDNSLIST			12

#DEFINE_CONSTANT	IPADDRESS					1
#DEFINE_CONSTANT	SUBNETMASK					2
#DEFINE_CONSTANT	DEFAULTROUTER				3
#DEFINE_CONSTANT	PEERIPADDRESS				4
#DEFINE_CONSTANT	DHCP						5
#DEFINE_CONSTANT	PEERIPID					6
#DEFINE_CONSTANT	HOSTNAME					7
#DEFINE_CONSTANT	DNSSERVER					8

#DEFINE_CONSTANT	MAX_ANALOG					255
#DEFINE_CONSTANT	MIN_ANALOG					0
#DEFINE_CONSTANT	MAX_PEERIPIDANALOG			254
#DEFINE_CONSTANT	MIN_PEERIPIDANALOG			3
#DEFINE_CONSTANT	DIR_CLOCKWISE				1
#DEFINE_CONSTANT	DIR_COUNTER_CLOCKWISE		-1

#DEFINE_CONSTANT	MAXDNS						8


#CATEGORY "0" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Enable; 
DIGITAL_INPUT KnobLeft;
DIGITAL_INPUT KnobRight;
DIGITAL_INPUT Enter;
DIGITAL_INPUT Menu;
DIGITAL_INPUT AcceleratedKnobEnable;
DIGITAL_INPUT RebootComplete;
DIGITAL_INPUT RetrievalComplete;
DIGITAL_INPUT DNSUpdateComplete;
DIGITAL_INPUT SoftKey[4];
ANALOG_INPUT KnobPktDelta;
ANALOG_INPUT KnobPktTime;
ANALOG_INPUT SlowTurnHSec;
ANALOG_INPUT SlowTurnIncrement;
ANALOG_INPUT FastTurnHSec;
ANALOG_INPUT FastTurnIncrement;
ANALOG_INPUT Slot;
 
STRING_INPUT AcceleratedKnobTrig[1];
STRING_INPUT MACAddressIn$[MAXMACADDRESSLENGTH]; 
STRING_INPUT HostNameIn$[MAXHOSTNAMELENGTH];
STRING_INPUT EditedHostnameIn$[MAXHOSTNAMELENGTH];
STRING_INPUT SystemInfo$[6][15]; 
STRING_INPUT DNS$[MAXDNS][15];
// BUFFER_INPUT 
                   
DIGITAL_OUTPUT Exit;   
DIGITAL_OUTPUT RebootNeeded;
DIGITAL_OUTPUT NewPeerIPTableNeeded;
DIGITAL_OUTPUT Rebooting;                
DIGITAL_OUTPUT ScrollListHighlight[SCROLLPAGESIZE];
DIGITAL_OUTPUT ScrollListIndicator[SCROLLPAGESIZE];
ANALOG_OUTPUT CurrentMenu; 
ANALOG_OUTPUT ScrollListScrollBar;
STRING_OUTPUT NewHostName$;
STRING_OUTPUT HostnameToEdit$;
STRING_OUTPUT PeerIPIDOut$;
STRING_OUTPUT ConsoleTx$;
STRING_OUTPUT ScrollListTitle$;
STRING_OUTPUT RemoveDNS$;
STRING_OUTPUT AddDNS$;
STRING_OUTPUT ScrollList$[SCROLLPAGESIZE];
STRING_OUTPUT SoftKey$[4];
STRING_OUTPUT SystemInfoOut$[5];

INTEGER ScrollIndex;
INTEGER ScrollHighlight;
INTEGER ScrollMax;
INTEGER StackCounter;
INTEGER OctetBeingSetup;
INTEGER Semaphore;
INTEGER OriginalOctet[IPOCTETOPTIONS][4];
INTEGER TempOctet[IPOCTETOPTIONS][4];
INTEGER NewOctet[IPOCTETOPTIONS][4];
INTEGER Octet;
INTEGER Busy;
INTEGER IPFlag[IPOPTIONS];
INTEGER DHCPOriginal;
INTEGER DHCPTemp;
INTEGER TempPeerIPID;
INTEGER OriginalPeerIPID;
STRING HostnameTemp$[MAXHOSTNAMELENGTH];

STRING List$[10][50];
STRING OldPeerIPTable$[60];
STRING NewPeerIPTable$[60];

SIGNED_LONG_INTEGER Slope;
SIGNED_LONG_INTEGER Intercept;

STRUCTURE Stack
	{
	INTEGER StackMenu;
	INTEGER StackIndex;
	INTEGER StackHighlight;
	};
	
Stack MenuStack[STACKSIZE];

INTEGER_Function TotalDNS()
	{
	INTEGER i;
	INTEGER Total;
	
	Total = MAXDNS;
	for(i = 1 to MAXDNS)
		{
		if(len(DNS$[i]) = 0)
			{
			Total = i - 1;
			break;
			}
		}
	Return(Total);
	}
	
FUNCTION RemoveEntry(INTEGER Index)
	{
	INTEGER i;
	
	if(Index < ScrollMax)
		{
		for(i = Index to (ScrollMax - 1))
			{
			List$[i] = List$[i + 1];
			}
		ScrollMax = ScrollMax - 1;
		if(ScrollIndex > ScrollMax)
			ScrollIndex = ScrollIndex - 1;
		if(ScrollHighlight > ScrollIndex)
			ScrollHighlight = ScrollHighlight - 1;
		}
	else if(Index = ScrollMax)
		{
		List$[ScrollHighlight] = "";
		if(ScrollMax > 1)
			{
			ScrollMax = ScrollMax - 1;
			ScrollIndex = ScrollIndex - 1;
			if(ScrollHighlight > ScrollIndex)
				ScrollHighlight = ScrollIndex;
			}
		else
			{
			ScrollMax = 0;
			List$[1] = "";
			}
		}
	}		
                        
INTEGER_FUNCTION CheckValue(SIGNED_LONG_INTEGER Value)
	{
	INTEGER NewValue;
	SIGNED_LONG_INTEGER MaxAnalog;
	
	MaxAnalog = MAX_ANALOG;
	if(Value > MaxAnalog)
		NewValue = MIN_ANALOG;
	else if (Value < MIN_ANALOG)
		NewValue = MAX_ANALOG;
	else
		NewValue = LowWord(Value);	
	return(NewValue);
	}                 

Function ComputeNewKnobValue(SIGNED_INTEGER Direction, INTEGER TimeDifference)
	{
	if(TimeDifference <= FastTurnHSec)
		TempOctet[OctetBeingSetup][Octet] = CheckValue(TempOctet[OctetBeingSetup][Octet] + Direction * FastTurnIncrement);
	else if((TimeDifference > FastTurnHSec) && (TimeDifference < SlowTurnHsec))
		TempOctet[OctetBeingSetup][Octet] = CheckValue(TempOctet[OctetBeingSetup][Octet] + Direction * (Slope * TimeDifference + Intercept));
	else
		TempOctet[OctetBeingSetup][Octet] = CheckValue(TempOctet[OctetBeingSetup][Octet] + Direction * SlowTurnIncrement);
	}
	
INTEGER_FUNCTION CheckPeerIPIDValue(SIGNED_LONG_INTEGER Value)
	{
	INTEGER NewValue;
	SIGNED_LONG_INTEGER MaxAnalog;
	
	MaxAnalog = MAX_PEERIPIDANALOG;
	if(Value = 1)	
		NewValue = MIN_PEERIPIDANALOG;
	else if(Value = 2)
		NewValue = MAX_PEERIPIDANALOG;
	else if(Value > MaxAnalog)
		NewValue = MIN_PEERIPIDANALOG;
	else if (Value < MIN_PEERIPIDANALOG)
		NewValue = MAX_PEERIPIDANALOG;
	else
		NewValue = LowWord(Value);	
	return(NewValue);
	}                 

Function ComputeNewPeerIPIDKnobValue(SIGNED_INTEGER Direction, INTEGER TimeDifference)
	{
	if(TimeDifference <= FastTurnHSec)
		TempPeerIPID = CheckPeerIPIDValue(TempPeerIPID + Direction * FastTurnIncrement);
	else if((TimeDifference > FastTurnHSec) && (TimeDifference < SlowTurnHsec))
		TempPeerIPID = CheckPeerIPIDValue(TempPeerIPID + Direction * (Slope * TimeDifference + Intercept));
	else
		TempPeerIPID = CheckPeerIPIDValue(TempPeerIPID + Direction * SlowTurnIncrement);
	}
	
FUNCTION CalculateSlope()
	{
	SIGNED_LONG_INTEGER Rise;
	SIGNED_LONG_INTEGER Run;
	INTEGER Flag;

	Rise = (FastTurnIncrement - SlowTurnIncrement);
	Run = (FastTurnHSec - SlowTurnHsec); 
	Flag = FALSE;
	if(Rise < 0)
		{
		Rise = -Rise;
		Flag = TRUE;
		}
	if(Run < 0)
		{
		Run = -Run;
		if(Flag = TRUE)
			Flag = FALSE;
		else
			Flag = TRUE;
		}
	Slope = Rise / Run;
	if(Flag = TRUE)
		Slope = -Slope;
	Intercept = SlowTurnIncrement - Slope * SlowTurnHsec;
	}

INTEGER_FUNCTION DecodeHex(STRING In$)
	{
	INTEGER Value;
	INTEGER Temp;
	
	Value = 0;
	if(len(In$) = 0)	
		Value = 0;
	else if(len(In$) = 1)
		{
		Temp = byte(In$, 1);
		if((Temp >= 48) && (Temp <= 57))
			Temp = Temp - 48;
		else if((Temp >= 65) && (Temp <= 70))
			Temp = Temp - 55;
		else if((Temp >= 97) && (Temp <= 102))
			Temp = Temp - 87;
		Value = Temp;
		}
	else if(len(In$) = 2)
		{
		Temp = byte(In$, 1);
		if((Temp >= 48) && (Temp <= 57))
			Temp = Temp - 48;
		else if((Temp >= 65) && (Temp <= 70))
			Temp = Temp - 55;
		else if((Temp >= 97) && (Temp <= 102))
			Temp = Temp - 87;
		Value = Temp * 16;
		Temp = byte(In$, 2);
		if((Temp >= 48) && (Temp <= 57))
			Temp = Temp - 48;
		else if((Temp >= 65) && (Temp <= 70))
			Temp = Temp - 55;
		else if((Temp >= 97) && (Temp <= 102))
			Temp = Temp - 87;
		Value = Value + Temp;
		}
	Return(Value);
	}

FUNCTION PushStack()
	{
	if(StackCounter <= STACKSIZE)
		{
		MenuStack[StackCounter].StackMenu = CurrentMenu;
		MenuStack[StackCounter].StackIndex = ScrollIndex;
		MenuStack[StackCounter].StackHighlight = ScrollHighlight;
		StackCounter = StackCounter + 1;
		}
	}
	
FUNCTION PopStack()
	{
	if(StackCounter > 1)
		{
		StackCounter = StackCounter - 1;
		CurrentMenu = MenuStack[StackCounter].StackMenu;
		ScrollIndex = MenuStack[StackCounter].StackIndex;
		ScrollHighlight = MenuStack[StackCounter].StackHighlight;
		}
	}     
     
FUNCTION ClearSoftKeys()
	{
	Softkey$[1] = "";
	Softkey$[2] = "";
	Softkey$[3] = "";
	Softkey$[4] = "";
	}

INTEGER_FUNCTION CalculateScrollBar(INTEGER Total, INTEGER Index)
	{
	INTEGER Temp;
	
	if(Index <= 1)
		Temp = 65535;
	else if((Index + SCROLLPAGESIZE - 1) >= Total)
		Temp = 0;
	else
		Temp = -((65535/(Total - SCROLLPAGESIZE)) * (Index - 1));
	Return(Temp);
	}
	
FUNCTION DrawMenu(INTEGER Total, INTEGER Index, INTEGER Highlight)
	{
	INTEGER i;
	
	if(Total > 0)
		{
		for(i = 1 to SCROLLPAGESIZE)
			{
			if((Index + i - 1) <= Total)
				ScrollList$[i] = List$[Index + i - 1];
			else
				ScrollList$[i] = "";
			if((Index + i - 1) = Highlight)
				ScrollListHighlight[i] = 1;
			else
				ScrollListHighlight[i] = 0;
			}
		ScrollListScrollbar = CalculateScrollbar(Total, Index);
		}
	else
		{
		for(i = 1 to ScrollPageSize)
			{
			ScrollList$[i] = "";
			ScrollListHighlight[i] = 0;
			}
		ScrollListScrollBar = 65535;
		}
	}
	
FUNCTION UpdateDNSOptions()
	{
	if(ScrollMax > 0)
		SoftKey$[3] = "Delete";
	if(ScrollMax < MAXDNS)
		SoftKey$[4] = "Add";
	}
	
Function RefreshOctets(INTEGER Selection)
	{
	if(Selection = 1)
		{
    	Makestring(SoftKey$[1], "[%03d]", TempOctet[OctetBeingSetup][1]);
		Makestring(SoftKey$[2], " %03d.", TempOctet[OctetBeingSetup][2]);
		Makestring(SoftKey$[3], " %03d.", TempOctet[OctetBeingSetup][3]);
		Makestring(SoftKey$[4], " %03d", TempOctet[OctetBeingSetup][4]);
		}
	else if(Selection = 2)
		{
    	Makestring(SoftKey$[1], " %03d.", TempOctet[OctetBeingSetup][1]);
		Makestring(SoftKey$[2], "[%03d]", TempOctet[OctetBeingSetup][2]);
		Makestring(SoftKey$[3], " %03d.", TempOctet[OctetBeingSetup][3]);
		Makestring(SoftKey$[4], " %03d", TempOctet[OctetBeingSetup][4]);
		}
	else if(Selection = 3)
		{
    	Makestring(SoftKey$[1], " %03d.", TempOctet[OctetBeingSetup][1]);
		Makestring(SoftKey$[2], " %03d.", TempOctet[OctetBeingSetup][2]);
		Makestring(SoftKey$[3], "[%03d]", TempOctet[OctetBeingSetup][3]);
		Makestring(SoftKey$[4], " %03d", TempOctet[OctetBeingSetup][4]);
		}
	else if(Selection = 4)
		{
    	Makestring(SoftKey$[1], " %03d.", TempOctet[OctetBeingSetup][1]);
		Makestring(SoftKey$[2], " %03d.", TempOctet[OctetBeingSetup][2]);
		Makestring(SoftKey$[3], " %03d.", TempOctet[OctetBeingSetup][3]);
		Makestring(SoftKey$[4], "[%03d]", TempOctet[OctetBeingSetup][4]);
		}
	}
/*
FUNCTION InitMenuMainDHCPOff(INTEGER Index, INTEGER Highlight)
	{
	CurrentMenu = MENUMAINDHCPOFF;
	ScrollListTitle$ = "Network Setup";
	List$[1] = "IP Address";
	List$[2] = "Subnet Mask";
	List$[3] = "Default Router";
	List$[4] = "DHCP";
	List$[5] = "Hostname";
	List$[6] = "Control System IP ID";
	List$[7] = "Control System IP Address";
	List$[8] = "MAC Address";
	ScrollIndex = Index;
	ScrollHighlight = Highlight;
	ScrollMax = 8;
	Call ClearSoftKeys();
	Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
	}
	
FUNCTION InitMenuMainDHCPOn(INTEGER Index, INTEGER Highlight)
	{
	CurrentMenu = MENUMAINDHCPON;
	ScrollListTitle$ = "Network Setup";
	List$[1] = "DHCP";
	List$[2] = "Hostname";
	List$[3] = "Control System IP ID";
	List$[4] = "Control System IP Address";
	List$[5] = "MAC Address";
	ScrollIndex = Index;
	ScrollHighlight = Highlight;
	ScrollMax = 5;
	Call ClearSoftKeys();
	Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
	}
	
FUNCTION InitMenuMain(INTEGER Index, INTEGER Highlight)
	{
	if(DHCPOriginal = 0)
		Call InitMenuMainDHCPOff(Index, Highlight);
	else
		Call InitMenuMainDHCPOn(Index, Highlight);
	}
*/	
FUNCTION InitMenuMain(INTEGER Index, INTEGER Highlight)
	{
	CurrentMenu = MENUMAIN;
	Makestring(ScrollListTitle$, "S%d ATC-AUDIONET", Slot);
//	if(EthernetLink = TRUE)
//		List$[1] = "Ethernet Link: Active";
//	else
//		List$[1] = "Ethernet Link: Inactive";
	List$[1] = "IP Address";
	List$[2] = "Subnet Mask";
	List$[3] = "Default Router";
	List$[4] = "DHCP";
	List$[5] = "Hostname";
	List$[6] = "DNS Servers";
	List$[7] = "Control System IP ID";
	List$[8] = "Control System IP Address";
	List$[9] = "MAC Address";
	ScrollIndex = Index;
	ScrollHighlight = Highlight;
	ScrollMax = 9;
	Call ClearSoftKeys();
	Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
	}
/*	
FUNCTION InitMenuEthernetLink()
	{
	CurrentMenu = MENUETHERNETLINK;
	ScrollListTitle$ = "Ethernet Link";
	ScrollList$[1] = "";
	if(EthernetLink = TRUE)
		ScrollList$[2] = "Online";
	else
		ScrollList$[2] = "Offline";
	ScrollList$[3] = "";
	Call ClearSoftkeys();
	}
*/
FUNCTION InitMenuDHCP()
	{
	CurrentMenu = MENUDHCP;
	ScrollListTitle$ = "Edit DHCP";
	List$[1] = "Off";
	List$[2] = "On";
	ScrollHighlight = 1;
	ScrollIndex = 1;
	ScrollMax = 2;
	if(DHCPTemp = TRUE)
		{
		ScrollListIndicator[1] = 0;
		ScrollListIndicator[2] = 1;
		}
	else
		{
		ScrollListIndicator[1] = 1;
		ScrollListIndicator[2] = 0;
		}
	Call ClearSoftkeys();
	Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
	}
	
FUNCTION InitMenuHostName()
	{
	CurrentMenu = MENUHOSTNAME;
	HostnameToEdit$ = HostNameTemp$;
	ScrollListTitle$ = "Edit Hostname";
	Softkey$[1] = "Del";
	Softkey$[2] = "<";
	Softkey$[3] = ">";
	Softkey$[4] = "Done";
	}

FUNCTION InitMenuDNS(INTEGER Index, INTEGER Highlight)
	{
	INTEGER i;
	
	CurrentMenu = MENUDNS;
	ScrollListTitle$ = "DNS Servers";
	Call ClearSoftKeys();
	ScrollIndex = Index;
	ScrollHighlight = Highlight;
	ScrollMax = TotalDNS();
	SoftKey$[1] = "";
	SoftKey$[2] = "";
	if(ScrollMax > 0)
		{
		For(i = 1 to ScrollMax)
			List$[i] = DNS$[i];
		}
	Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
	Call UpdateDNSOptions();
	}
	
/*	
FUNCTION InitMenuControlSystemLink()
	{
	CurrentMenu = MENUCONTROLSYSTEMLINK;
	ScrollListTitle$ = "Control System Link";
	ScrollList$[1] = "";
	if(ControlSystemOffline = FALSE)
		ScrollList$[2] = "Online";
	else
		ScrollList$[2] = "Offline";
	ScrollList$[3] = "";
	Call ClearSoftkeys();
	}
*/
FUNCTION InitMenuPeerIPID()
	{
	CurrentMenu = MENUPEERIPID;
	ScrollListTitle$ = "Edit Control Sys IP ID";
	Makestring(PeerIPIDOut$, "%02X", TempPeerIPID);
	Call ClearSoftKeys();                    
	}
	
FUNCTION InitMenuMACAddress()
	{
	CurrentMenu = MENUMACADDRESS;
	ScrollListTitle$ = "AUDIONET MAC Addr.";
	ScrollList$[1] = "";
	ScrollList$[2] = MACAddressIn$;
	ScrollList$[3] = "";
	Call ClearSoftkeys();
	}
	
FUNCTION InitMenuIPOctetSetup(INTEGER Index, INTEGER Highlight, INTEGER Setting)
	{
	CurrentMenu = MENUOCTETSETUP;
	if(Setting = IPADDRESS)
		ScrollListTitle$ = "Edit IP Address";
	else if(Setting = SUBNETMASK)
		ScrollListTitle$ = "Edit Subnet Mask";
	else if(Setting = DEFAULTROUTER)
		ScrollListTitle$ = "Edit Default Router";
	else if(Setting = PEERIPADDRESS)
		ScrollListTitle$ = "Edit Ctrl Sys IP Address";
	else if(Setting = DNSSERVER)
		ScrollListTitle$ = "Enter New DNS Server";
	ScrollList$[1] = "Use Softbutton to select.";
	ScrollList$[2] = "Then use Knob to edit.";
	ScrollList$[3] = "Press ENTER to accept.";
	Octet = 1;
	Call RefreshOctets(Octet);
	}
	
FUNCTION InitMenuIPOCtetView(INTEGER Setting)
	{
	CurrentMenu = MENUOCTETVIEW;
	if(Setting = IPADDRESS)
		{
		ScrollListTitle$ = "Current IP Address";
		ScrollList$[1] = SystemInfo$[1];
		}
	else if(Setting = SUBNETMASK)
		{
		ScrollListTitle$ = "Current Subnet Mask";
		ScrollList$[1] = SystemInfo$[2];
		}
	else if(Setting = DEFAULTROUTER)
		{
		ScrollListTitle$ = "Current Default Router";
		ScrollList$[1] = SystemInfo$[3];
		}
	}
	
FUNCTION InitMenuReboot()
	{
	CurrentMenu = MENUREBOOT;
	if(NewPeerIPTableNeeded = TRUE)
		{
		ConsoleTx$ = OldPeerIPTable$;
		delay(200);
		ConsoleTx$ = NewPeerIPTable$;
		delay(200);
		}
	Makestring(ConsoleTx$, "intrcon slot %d reboot\n", Slot);
	delay(200);
	Rebooting = TRUE;
	wait(6000)
		{
		Rebooting = FALSE;
		Exit = 1;
		Exit = 0;
		}
	}
	
FUNCTION InitMenuRetrievingSettings()
	{
	CurrentMenu = MENURETRIEVINGSETTINGS;
	Makestring(ScrollListTitle$, "S%d ATC-AUDIONET", Slot);
	Call ClearSoftKeys();
	wait(3000, RetrievingWait)
		{
		Call InitMenuMain(ScrollIndex, ScrollHighlight);
        }
    }

PUSH Enable
	{
	INTEGER i;
	
	for(i = 1 to IPOPTIONS)
		IPFlag[i] = FALSE;
	NewPeerIPTableNeeded = FALSE;
	Call InitMenuRetrievingSettings();
//	Call InitMenuMain(ScrollIndex, ScrollHighlight);
	}
	
RELEASE Enable
	{
	CurrentMenu = 0;
	}
	
PUSH KnobRight
	{
	if(Enable = TRUE)
		{
		if((CurrentMenu = MENUMAIN)
//		|| (CurrentMenu = MENUMAINDHCPON)
		|| (CurrentMenu = MENUDHCP)
		|| (CurrentMenu = MENUDNS))
			{
			if(ScrollHighlight < ScrollMax)
				{
				ScrollHighlight = ScrollHighlight + 1;
				if(ScrollHighlight > ScrollIndex + ScrollPageSize - 1)
			   		{
			   		ScrollIndex = ScrollIndex + 1;
					}
				Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
				}
			}
		}
	}

PUSH KnobLeft
	{
	if(Enable = TRUE)
		{
		if((CurrentMenu = MENUMAIN)
//		|| (CurrentMenu = MENUMAINDHCPON)
		|| (CurrentMenu = MENUDHCP)
		|| (CurrentMenu = MENUDNS))
			{
			if(ScrollHighlight > 1)
		    	{
		    	ScrollHighlight = ScrollHighlight - 1;
		    	if(ScrollHighlight < ScrollIndex)
		    		{
		    		ScrollIndex = ScrollHighlight;
					}
				Call DrawMenu(ScrollMax, ScrollIndex, ScrollHighlight);
				}
			}
		}
	}
	
PUSH Enter
	{
	INTEGER Selection;
	
	if(Enable = TRUE)
		{
		Selection = ScrollHighlight;
		cswitch(CurrentMenu)
			{
			case(MENUMAIN):
//			case(MENUMAINDHCPOFF):
				{
				cswitch(Selection)
					{
					case(1):
						{
						Call PushStack();
						OctetBeingSetup = IPADDRESS;
						if(DHCPTemp = FALSE)
							Call InitMenuIPOctetSetup(1, 1, OctetBeingSetup);
						else
							Call InitMenuIPOCtetView(OctetBeingSetup);
						break;
						}
					case(2):
						{
						Call PushStack();
						OctetBeingSetup = SUBNETMASK;
						if(DHCPTemp = FALSE)
							Call InitMenuIPOctetSetup(1, 1, OctetBeingSetup);
						else
							Call InitMenuIPOCtetView(OctetBeingSetup);
						break;
						}
					case(3):
						{
						Call PushStack();
						OctetBeingSetup = DEFAULTROUTER;
						if(DHCPTemp = FALSE)
							Call InitMenuIPOctetSetup(1, 1, OctetBeingSetup);
						else
							Call InitMenuIPOCtetView(OctetBeingSetup);
						break;
						}
					case(4):
						{
						Call PushStack();
						Call InitMenuDHCP();
						break;
						}
					case(5):
						{
						Call PushStack();
						Call InitMenuHostname();
						break;
						}
					case(6):
						{
						Call PushStack();
						Call InitMenuDNS(1, 1);
						break;
						}
					case(7):
						{
						Call PushStack();
						Call InitMenuPeerIPID();
						break;
						}
					case(8):
						{
						Call PushStack();
						OctetBeingSetup = PEERIPADDRESS;
						Call InitMenuIPOctetSetup(1, 1, OctetBeingSetup);
						break;
						}
					case(9):
						{
						Call PushStack();
						Call InitMenuMACAddress();
						break;
						}
					}
				break;
				}
			case(MENUOCTETSETUP):
				{
				if(Octet = 1)
					{
					Octet = 2;
					Call RefreshOctets(Octet);
					}
				else if(Octet = 2)
					{
					Octet = 3;
					Call RefreshOctets(Octet);
					}
				else if(Octet = 3)
					{
					Octet = 4;
					Call RefreshOctets(Octet);
					}
				else if(Octet = 4)
					{
					if((TempOctet[OctetBeingSetup][1] <> OriginalOctet[OctetBeingSetup][1]) || (TempOctet[OctetBeingSetup][2] <> OriginalOctet[OctetBeingSetup][2]) || (TempOctet[OctetBeingSetup][3] <> OriginalOctet[OctetBeingSetup][3]) || (TempOctet[OctetBeingSetup][4] <> OriginalOctet[OctetBeingSetup][4]))
						{
						NewOctet[OctetBeingSetup][1] = TempOctet[OctetBeingSetup][1];
						NewOctet[OctetBeingSetup][2] = TempOctet[OctetBeingSetup][2];
						NewOctet[OctetBeingSetup][3] = TempOctet[OctetBeingSetup][3];
						NewOctet[OctetBeingSetup][4] = TempOctet[OctetBeingSetup][4];					
	                    IPFlag[OctetBeingSetup] = TRUE;
	                    if((OctetBeingSetup = IPADDRESS) || (OctetBeingSetup = SUBNETMASK) || (OctetBeingSetup = DEFAULTROUTER))
	                    	Makestring(SystemInfoOut$[OctetBeingSetup], "%03d.%03d.%03d.%03d", NewOctet[OctetBeingSetup][1], NewOctet[OctetBeingSetup][2], NewOctet[OctetBeingSetup][3], NewOctet[OctetBeingSetup][4]);
	                    else if(OctetBeingSetup = PEERIPADDRESS)
	                    	Makestring(NewPeerIPTable$, "intrcon slot %d addmaster %02X %03d.%03d.%03d.%03d\n", Slot, TempPeerIPID, TempOctet[PEERIPADDRESS][1], TempOctet[PEERIPADDRESS][2], TempOctet[PEERIPADDRESS][3], TempOctet[PEERIPADDRESS][4]);
						else if(OctetBeingSetup = DNSSERVER)
							Makestring(AddDNS$, "%03d.%03d.%03d.%03d", NewOctet[OctetBeingSetup][1], NewOctet[OctetBeingSetup][2], NewOctet[OctetBeingSetup][3], NewOctet[OctetBeingSetup][4]);
    					}
					else
						IPFlag[OctetBeingSetup] = FALSE;
					if(OctetBeingSetup = DNSSERVER)
						{
						CurrentMenu = MENUUPDATINGDNSLIST;
						Call ClearSoftKeys();
						}
					else
						{
						Call PopStack();
						Call InitMenuMain(ScrollIndex, ScrollHighlight);
						}
					}			 		
				break;
				}
			case(MENUDHCP):
				{
				if(DHCPOriginal = 0)
					{
					if(Selection = 1)
						{
						SystemInfoOut$[DHCP] = "Off";
						IPFlag[DHCP] = FALSE;
						DHCPTemp = 0;
						}
					else
						{
						SystemInfoOut$[DHCP] = "On";
						IPFlag[DHCP] = TRUE;
						DHCPTemp = 1;
						}
					}
				else
					{
					if(Selection = 1)
						{
						SystemInfoOut$[DHCP] = "Off";
						IPFlag[DHCP] = TRUE;
						DHCPTemp = 0;
						}
					else
						{
						SystemInfoOut$[DHCP] = "On";
						IPFlag[DHCP] = FALSE;
						DHCPTemp = 1;
						}
					}
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUPEERIPID):
				{
				if(TempPeerIPID <> OriginalPeerIPID)
					{
					Makestring(NewPeerIPTable$, "intrcon slot %d addmaster %02X %03d.%03d.%03d.%03d\n", Slot, TempPeerIPID, TempOctet[PEERIPADDRESS][1], TempOctet[PEERIPADDRESS][2], TempOctet[PEERIPADDRESS][3], TempOctet[PEERIPADDRESS][4]); 
					IPFlag[PEERIPID] = TRUE;
					}
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUMACADDRESS):
				{
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				}
			}
		}
	}

PUSH Softkey
	{
	INTEGER Index;
	
	if(Enable = TRUE)
		{
		Index = getlastmodifiedarrayindex();
		cswitch(CurrentMenu)
			{
			case(MENUOCTETSETUP):
				{
				Octet = Index;
				Call RefreshOctets(Octet);
				break;
				}
			case(MENUDNS):
				{
				if((Index = 3) && (ScrollMax > 0))		//Remove
					{
					RemoveDNS$ = DNS$[ScrollHighlight];
					CurrentMenu = MENUUPDATINGDNSLIST;
					Call ClearSoftKeys();
					}
				else if((Index = 4) && (ScrollMax < MAXDNS))
					{
					OctetBeingSetup = DNSSERVER;
					Call InitMenuIPOctetSetup(1, 1, OctetBeingSetup);
					}
				}
			}
		}
	}
	
PUSH Menu
	{
	INTEGER i;
	
	if(Enable = TRUE)
		{
		cswitch(CurrentMenu)
			{
			case(MENUMAIN):
				{
				RebootNeeded = FALSE;
				for(i = 1 to IPOPTIONS)
					{
					if(IPFlag[i] = TRUE)
						{
						RebootNeeded = TRUE;
						}
					}
				if((IPFlag[PEERIPID] = TRUE) || (IPFlag[PEERIPADDRESS] = TRUE))
					NewPeerIPTableNeeded = TRUE;
				else
					NewPeerIPTableNeeded = FALSE;
				ScrollIndex = 1;
				ScrollHighlight = 1;
				if((RebootNeeded = FALSE) && (NewPeerIPTableNeeded = FALSE))
					{
					Exit = 1;
					Exit = 0;
					}
				else
					{
					Call InitMenuReboot();
					}
				break;
				}
			case(MENUOCTETSETUP):
				{
				if(OctetBeingSetup <> DNSSERVER)
					{
					if(IPFlag[OctetBeingSetup] = FALSE)
						{
						for(i = 1 to 4)
							TempOctet[OctetBeingSetup][i] = OriginalOctet[OctetBeingSetup][i];
						}
					Call PopStack();
					Call InitMenuMain(ScrollIndex, ScrollHighlight);
					}
				else
					Call InitMenuDNS(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUOCTETVIEW):
				{
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUDHCP):
				{
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUMACADDRESS):
				{
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUHOSTNAME):
				{
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUPEERIPID):
				{
				if(IPFlag[PeerIPID] = FALSE)
					TempPeerIPID = OriginalPeerIPID;
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			case(MENUDNS):
				{
				Call PopStack();
				Call InitMenuMain(ScrollIndex, ScrollHighlight);
				break;
				}
			}
		}
	}
	
PUSH RebootComplete
	{
	cancelallwait();
	Rebooting = FALSE;
	Exit = 1;
	Exit = 0;
	}
	
PUSH RetrievalComplete
	{
	CancelWait(RetrievingWait);
	Call InitMenuMain(ScrollIndex, ScrollHighlight);
	}
      
CHANGE SystemInfo$
	{
	INTEGER Index;
	INTEGER Marker1;
	INTEGER Marker2;
	INTEGER Marker3;
	
	if(Semaphore = 0)
		{
		Semaphore = 1;
		Index = GetLastModifiedArrayIndex();
		if((Index > 0) && (Index < 5))
			{
			Marker1 = find(".", SystemInfo$[Index]);
			Marker2 = find(".", SystemInfo$[Index], Marker1 + 1);
			Marker3 = find(".", SystemInfo$[Index], Marker2 + 1);
			if((Marker1 > 0) && (Marker2 > 0) && (Marker3 > 0))
				{
				OriginalOctet[Index][1] = atoi(mid(SystemInfo$[Index], 1, Marker1 - 1));
				TempOctet[Index][1] = OriginalOctet[Index][1]; 
				OriginalOctet[Index][2] = atoi(mid(SystemInfo$[Index], Marker1 + 1, Marker2 - Marker1 - 1));
				TempOctet[Index][2] = OriginalOctet[Index][2];
				OriginalOctet[Index][3] = atoi(mid(SystemInfo$[Index], Marker2 + 1, Marker3 - Marker2 - 1));
				TempOctet[Index][3] = OriginalOctet[Index][3];
				OriginalOctet[Index][4] = atoi(mid(SystemInfo$[Index], Marker3 + 1, 3));
				TempOctet[Index][4] = OriginalOctet[Index][4];
				}
			if(Index = 4)
				Makestring(OldPeerIPTable$, "intrcon slot %d remmaster %02X %03d.%03d.%03d.%03d\n", Slot, TempPeerIPID, OriginalOctet[PEERIPADDRESS][1], OriginalOctet[PEERIPADDRESS][2], OriginalOctet[PEERIPADDRESS][3], OriginalOctet[PEERIPADDRESS][4]);
			}
		else if(Index = DHCP)
			{
            if(SystemInfo$[DHCP] = "On")
				{
				DHCPTemp = 1;
				DHCPOriginal = 1;
				}
			else if(SystemInfo$[DHCP] = "Off")
				{
				DHCPTemp = 0;
				DHCPOriginal = 0;
				}
			}
		else if(Index = PEERIPID)
			{
			TempPeerIPID = DecodeHex(SystemInfo$[Index]);
			OriginalPeerIPID = TempPeerIPID;
			Makestring(OldPeerIPTable$, "intrcon slot %d remmaster %02X %03d.%03d.%03d.%03d\n", Slot, TempPeerIPID, OriginalOctet[PEERIPADDRESS][1], OriginalOctet[PEERIPADDRESS][2], OriginalOctet[PEERIPADDRESS][3], OriginalOctet[PEERIPADDRESS][4]);
			}
		Semaphore = 0;
		}	
	}
	
CHANGE HostNameIn$
	{
	HostNameTemp$ = HostNameIn$;
	}
	
CHANGE EditedHostnameIn$
	{
	HostnameTemp$ = EditedHostnameIn$;
	NewHostname$ = HostnameTemp$;
	IPFlag[HOSTNAME] = TRUE;
	Call PopStack();
	Call InitMenuMain(ScrollIndex, ScrollHighlight);			
	}

CHANGE AcceleratedKnobTrig
	{
	STRING Temp[1];
	
	if((Busy = FALSE) && (AcceleratedKnobEnable = TRUE))
		{
		Busy = TRUE;
		while(AcceleratedKnobEnable = TRUE)
			{
			Temp = gather("*", AcceleratedKnobTrig);
			if(CurrentMenu = MENUOCTETSETUP)
				{
				ComputeNewKnobValue(KnobPktDelta, KnobPktTime);
				Makestring(Softkey$[Octet], "[%03d]", TempOctet[OctetBeingSetup][Octet]);
				}
			else if(CurrentMenu = MENUPEERIPID)
				{
				ComputeNewPeerIPIDKnobValue(KnobPktDelta, KnobPktTime);
				Makestring(PeerIPIDOut$, "%02X", TempPeerIPID);
				}
			}
		Busy = FALSE;
		}
	}
	
CHANGE FastTurnIncrement
	{
	Call CalculateSlope();
	}
	
PUSH DNSUpdateComplete
	{
	if(CurrentMenu = MENUUPDATINGDNSLIST)
		{
		ScrollMax = TotalDNS();
		if(ScrollIndex > ScrollMax)
			ScrollIndex = ScrollMax;
		if(ScrollHighlight > ScrollMax)
			ScrollHighlight = ScrollMax;
		Call InitMenuDNS(ScrollIndex, ScrollHighlight);
		}
	}
	
FUNCTION Main()
	{
	ScrollIndex = 1;
	ScrollHighlight = 1;
	StackCounter = 1;
	TempOctet[DNSSERVER][1] = 0;
	TempOctet[DNSSERVER][2] = 0;
	TempOctet[DNSSERVER][3] = 0;
	TempOctet[DNSSERVER][4] = 0;
	}

