/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXROOMS	24
#CATEGORY "0" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Room[MAXROOMS];
ANALOG_INPUT MapInLow, MapInHigh; 
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT RoomFb[MAXROOMS]; 
ANALOG_OUTPUT MapOutLow, MapOutHigh;
// STRING_OUTPUT 

INTEGER CurrentMapLow, CurrentMapHigh;

CHANGE MapInLow, MapInHigh
	{
	INTEGER Mask;
	INTEGER i;
	
	CurrentMapLow = MapInLow;
	Mask = 0x0001;
	for(i = 1 to 12)
		{
		if((MapInLow & Mask) > 0)
			RoomFb[i] = 1;
		else
			RoomFb[i] = 0;
		Mask = Mask << 1;
		}
	MapOutLow = MapInLow;
	CurrentMapHigh = MapInHigh;
	Mask = 0x0001;
	for(i = 13 to 24)
		{
		if((MapInHigh & Mask) > 0)
			RoomFb[i] = 1;
		else
			RoomFb[i] = 0;
		Mask = Mask << 1;
		}
	MapOutHigh = MapInHigh;
	}
	
PUSH Room
	{
	INTEGER Index;
	INTEGER Mask;
	
	Index = getlastmodifiedarrayindex();
	if(Index <= 12)
		{
		Mask = 0x0001 << (Index - 1);
		if(RoomFb[Index] = 1)
			{
			RoomFb[Index] = 0;
			CurrentMapLow = CurrentMapLow & Not(Mask);
			}
		else
			{
			RoomFb[Index] = 1;
			CurrentMapLow = CurrentMapLow | Mask;
			}
		MapOutLow = CurrentMapLow;
		}
	else if(Index <= 24)
		{
		Mask = 0x0001 << (Index - 13);
		if(RoomFb[Index] = 1)
			{
			RoomFb[Index] = 0;
			CurrentMapHigh = CurrentMapHigh & Not(Mask);
			}
		else
			{
			RoomFb[Index] = 1;
			CurrentMapHigh = CurrentMapHigh | Mask;
			}
		MapOutHigh = CurrentMapHigh;
		}
	}	
	
Function Main()
	{
	CurrentMapLow = 0;
	CurrentMapHigh = 0;
	}
