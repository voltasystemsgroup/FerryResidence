/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: CRR
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT 	MAXLENGTH		24
#DEFINE_CONSTANT 	MAXENTRIES		10
#DEFINE_CONSTANT 	FALSE			0
#DEFINE_CONSTANT 	TRUE			1

#DEFINE_CONSTANT	MENUMAIN		1
#DEFINE_CONSTANT	MENUADJUST		2

#CATEGORY "0" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

DIGITAL_INPUT KnobRight;
DIGITAL_INPUT KnobLeft;
DIGITAL_INPUT Enter;
DIGITAL_INPUT Menu;
DIGITAL_INPUT SourceAndMore;
DIGITAL_INPUT SourceMode;
DIGITAL_INPUT SoftKey[4];
DIGITAL_INPUT SourceDisabled[MAXENTRIES];
ANALOG_INPUT SourceActive;
ANALOG_INPUT SourceType[MAXENTRIES];
ANALOG_INPUT SourceGain[MAXENTRIES];
STRING_INPUT SourceName$[MAXENTRIES][MAXLENGTH];

DIGITAL_OUTPUT EnterFb; 
DIGITAL_OUTPUT Connect;
DIGITAL_OUTPUT SourceGainUp;
DIGITAL_OUTPUT SourceGainDown;
DIGITAL_OUTPUT SourceGainReset;
ANALOG_OUTPUT CurrentMenu; 
ANALOG_OUTPUT SourceOut;                  
ANALOG_OUTPUT SourceTypeOut;
ANALOG_OUTPUT NowPlayingIndex;
ANALOG_OUTPUT SourceGainToAdjust;
ANALOG_OUTPUT SourceGainOut;
STRING_OUTPUT SourceNameOut$; 
STRING_OUTPUT SerialOut$[5];              

INTEGER g_iIndex;
           
           
Function RefreshOutput()
	{
	if((g_iIndex > 0) && (g_iIndex <= MAXENTRIES))
		{
		SerialOut$[5] = SourceName$[g_iIndex];
		SourceNameOut$ = SourceName$[g_iIndex];
		NowPlayingIndex = 0;
		NowPlayingIndex = g_iIndex;
		SourceOut = g_iIndex;
		SourceTypeOut = SourceType[g_iIndex];
		if(((SourceTypeOut > 0) && (SourceTypeOut < 6)) || ((SourceTypeOut > 6) && (SourceTypeOut < 28)))
//		if((SourceTypeOut > 0) && (SourceTypeOut < 6))
			{
			SerialOut$[1] = "Control";
			EnterFb = 1;
			}
		else
			{
			SerialOut$[1] = "";
			EnterFb = 0;
			}
		}
	else
		{
		NowPlayingIndex = 0;
		SourceOut = 0;
		SerialOut$[5] = "No Source Selected";
		SourceNameOut$ = "";
		SourceTypeOut = 0;
		EnterFb = 0;
		}
	}
	
CHANGE SourceActive
	{
	if((SourceActive > 0) && (SourceActive <= MAXENTRIES))
		{
		CurrentMenu = MENUMAIN;
		SourceGainToAdjust = 0;
		g_iIndex = SourceActive;
		Call RefreshOutput();
		}
	else if(SourceActive = 0)
		{
		g_iIndex = 0;
		NowPlayingIndex = 0;
		SourceOut = 0;
		SerialOut$[5] = "No Source Selected";
		SourceNameOut$ = "";
		SourceTypeOut = 0;
		}
	}
		
PUSH KnobRight
	{
	INTEGER Counter;
	INTEGER i;
	
	if(CurrentMenu = MENUMAIN)
		{
		Counter = g_iIndex;
		g_iIndex = 0;
		for(i = 1 to MAXENTRIES)
			{
			if(Counter < MAXENTRIES)
				Counter = Counter + 1;
			else
				Counter = 1;
			if(SourceDisabled[Counter] = FALSE)
				{
				g_iIndex = Counter;
				break;
				}
			}
		Call RefreshOutput();			
		}
	else if(CurrentMenu = MENUADJUST)
		{
		SourceGainUp = 1;
		SourceGainUp = 0;
		}
	}

PUSH KnobLeft
	{
	INTEGER Counter;
	INTEGER i;
	
	if(CurrentMenu = MENUMAIN)
		{
		Counter = g_iIndex;
		g_iIndex = 0;
		for(i = 1 to MAXENTRIES)
			{
			if(Counter > 1)
				Counter = Counter - 1;
			else
				Counter = MAXENTRIES;
			if(SourceDisabled[Counter] = FALSE)
				{
				g_iIndex = Counter;
				break;
				}
			}
		Call RefreshOutput();
		}
	else if(CurrentMenu = MENUADJUST)
		{
		SourceGainDown = 1;
		SourceGainDown = 0;
		}
	}

PUSH SourceAndMore
	{
	if(CurrentMenu = MENUMAIN)
		{
		if((g_iIndex > 0) && (g_iIndex <= MAXENTRIES))
			{
			CurrentMenu = MENUADJUST;
			EnterFb = 0;
			SerialOut$[1] = "";
			SerialOut$[2] = "";
			SerialOut$[3] = "";
			SerialOut$[4] = "Reset";
			SourceGainOut = SourceGain[g_iIndex];
			SourceGainToAdjust = SourceOut;
			}
		}
	}
	
PUSH Menu
	{
	if(CurrentMenu = MENUADJUST)
		{
		CurrentMenu = MENUMAIN;
		SourceGainToAdjust = 0;
		SerialOut$[2] = "";
		SerialOut$[3] = "";
		SerialOut$[4] = "";
		Call RefreshOutput();
		}
	}
		
PUSH SourceMode
    {
    INTEGER Counter;
	INTEGER i;
	
	CurrentMenu = MENUMAIN;
	SourceGainToAdjust = 0;
	SerialOut$[2] = "";
	SerialOut$[3] = "";
	SerialOut$[4] = "";
	if(g_iIndex > 0)
		{
		if(SourceDisabled[g_iIndex] = TRUE)
			{
			Counter = g_iIndex;
			g_iIndex = 0;
			for(i = 1 to MAXENTRIES)
				{
				if(Counter < MAXENTRIES)
					Counter = Counter + 1;
				else
					Counter = 1;
				if(SourceDisabled[Counter] = FALSE)
					{
					g_iIndex = Counter;
					break;
					}
				}
			}
		}
	Call RefreshOutput();
	}
	
Release SourceMode
	{
	CurrentMenu = 0;
	SourceGainToAdjust = 0;
	SerialOut$[1] = "";
	SerialOut$[2] = "";
	SerialOut$[3] = "";
	SerialOut$[4] = "";
	SerialOut$[5] = "";
	}
	
CHANGE SourceGain
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if((Index = SourceOut) && (CurrentMenu = MENUADJUST))
		SourceGainOut = SourceGain[Index];
	}
	
PUSH Enter
	{
	if(((SourceTypeOut > 0) && (SourceTypeOut < 6)) || ((SourceTypeOut > 6) && (SourceTypeOut < 28)))
		{
		Connect = 1;
		Connect = 0;
		}
	}
	
PUSH SoftKey
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if(CurrentMenu = MENUMAIN)
		{
		if(Index = 1)
			{
			if(((SourceTypeOut > 0) && (SourceTypeOut < 6)) || ((SourceTypeOut > 6) && (SourceTypeOut < 28)))
				{
				Connect = 1;
				Connect = 0;
				}
			}
		}
	else if(CurrentMenu = MENUADJUST)
		{
		if(Index = 4)
			{
			SourceGainReset = 1;
			SourceGainReset = 0;
			}
		}
	}
		
FUNCTION Main()
	{
	g_iIndex = 1;
	CurrentMenu = 0;
	SourceGainToAdjust = 0;
	}
