/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: CRR
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXLENGTH	24
#DEFINE_CONSTANT MAXENTRIES	10
#DEFINE_CONSTANT FALSE		0
#DEFINE_CONSTANT TRUE		1
#CATEGORY "0" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

DIGITAL_INPUT First;
DIGITAL_INPUT Next;
DIGITAL_INPUT Previous;
DIGITAL_INPUT Refresh;
DIGITAL_INPUT EditActive;
DIGITAL_INPUT SourceDisabled[MAXENTRIES];
ANALOG_INPUT SourceActive;
ANALOG_INPUT SourceType[MAXENTRIES];
STRING_INPUT SourceName$[MAXENTRIES][MAXLENGTH];
               
ANALOG_OUTPUT SourceOut;                  
ANALOG_OUTPUT SourceTypeOut;
ANALOG_OUTPUT NowPlayingIndex;
STRING_OUTPUT SourceNameOut$;                    

INTEGER g_iIndex;

Function RefreshOutput()
	{
	if((g_iIndex > 0) && (g_iIndex <= MAXENTRIES))
		{
		NowPlayingIndex = 0;
		NowPlayingIndex = g_iIndex;
		SourceOut = g_iIndex;
		if(EditActive = 1)
			SourceNameOut$ = "[" + SourceName$[g_iIndex] + "]";
		else
			SourceNameOut$ = SourceName$[g_iIndex];
		SourceTypeOut = SourceType[g_iIndex];
		}
	else
		{
		NowPlayingIndex = 0;
		SourceOut = 0;
		if(EditActive = 1)
			SourceNameOut$ = "[No Source Selected]";
		else
			SourceNameOut$ = "No Source Selected";
		SourceTypeOut = 0;
		}
	}

CHANGE SourceActive
	{
	if((SourceActive > 0) && (SourceActive <= MAXENTRIES))
		{
		g_iIndex = SourceActive;
		Call RefreshOutput();
		}
	else if(SourceActive = 0)
		{
		g_iIndex = 0;
		NowPlayingIndex = 0;
		SourceOut = 0;
		if(EditActive = 1)
			SourceNameOut$ = "[No Source Selected]";
		else
			SourceNameOut$ = "No Source Selected";
		SourceTypeOut = 0;
		}
	}
	
CHANGE EditActive
	{
	Call RefreshOutput();
	}
		
PUSH First
	{
	INTEGER Counter;
	INTEGER i;
	
	g_iIndex = 0;
	Counter = 1;
	for(i = 1 to MAXENTRIES)
		{
		if(Counter < MAXENTRIES)
			Counter = Counter + 1;
		else
			Counter = 1;
		if(SourceDisabled[Counter] = FALSE)
			{
			g_iIndex = Counter;
			break;
			}
		}
	Call RefreshOutput();			
	}

PUSH Next
	{
	INTEGER Counter;
	INTEGER i;
	
	Counter = g_iIndex;
	g_iIndex = 0;
	for(i = 1 to MAXENTRIES)
		{
		if(Counter < MAXENTRIES)
			Counter = Counter + 1;
		else
			Counter = 1;
		if(SourceDisabled[Counter] = FALSE)
			{
			g_iIndex = Counter;
			break;
			}
		}
	Call RefreshOutput();			
	}

PUSH Previous
	{
	INTEGER Counter;
	INTEGER i;
	
	Counter = g_iIndex;
	g_iIndex = 0;
	for(i = 1 to MAXENTRIES)
		{
		if(Counter > 1)
			Counter = Counter - 1;
		else
			Counter = MAXENTRIES;
		if(SourceDisabled[Counter] = FALSE)
			{
			g_iIndex = Counter;
			break;
			}
		}
	Call RefreshOutput();			
	}
	
PUSH Refresh
    {
    INTEGER Counter;
	INTEGER i;
	
	if(g_iIndex > 0)
		{
		if(SourceDisabled[g_iIndex] = TRUE)
			{
			Counter = g_iIndex;
			g_iIndex = 0;
			for(i = 1 to MAXENTRIES)
				{
				if(Counter < MAXENTRIES)
					Counter = Counter + 1;
				else
					Counter = 1;
				if(SourceDisabled[Counter] = FALSE)
					{
					g_iIndex = Counter;
					break;
					}
				}
			}
		}
	Call RefreshOutput();
	}
	
FUNCTION Main()
	{
	g_iIndex = 1;
	}
