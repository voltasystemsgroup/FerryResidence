/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: CRR
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT 	MAXLENGTH					24
#DEFINE_CONSTANT 	MAXENTRIES					10
#DEFINE_CONSTANT	MAXROOMENTRIES				24
#DEFINE_CONSTANT 	FALSE						0
#DEFINE_CONSTANT 	TRUE						1

#DEFINE_CONSTANT	MENUMAIN					1
#DEFINE_CONSTANT	MENUUSERADJUST				2
#DEFINE_CONSTANT	MENUINSTALLERADJUST			3
#DEFINE_CONSTANT	MENUSOURCESELECT			4
#DEFINE_CONSTANT	MENUUSERADJUSTVALUE			5
#DEFINE_CONSTANT	MENUINSTALLERADJUSTVALUE	6
#DEFINE_CONSTANT	MENUGLOBALVOLUME			7
#DEFINE_CONSTANT	MENUOTHER					8
#DEFINE_CONSTANT	MENUMESSAGE					9

#DEFINE_CONSTANT	ADJUSTBASS					1
#DEFINE_CONSTANT	ADJUSTTREBLE				2
#DEFINE_CONSTANT	ADJUSTBALANCE				3
#DEFINE_CONSTANT	ADJUSTLOUDNESS				4
#DEFINE_CONSTANT	ADJUSTMINV					1
#DEFINE_CONSTANT	ADJUSTMAXV					2
#DEFINE_CONSTANT	ADJUSTSTARTV				3
#DEFINE_CONSTANT	ADJUSTMONO					4

#DEFINE_CONSTANT	OTHERITEMGLOBAL				1
#DEFINE_CONSTANT	OTHERITEMSLEEP				2
#DEFINE_CONSTANT	OTHERITEMDONOTDISTURB		3
#DEFINE_CONSTANT	OTHERITEMSLEEPADJUST		4
#DEFINE_CONSTANT	OTHERITEMSLEEPWARNING		5

#DEFINE_CONSTANT	PRIORITYMODEOFF			0
#DEFINE_CONSTANT	PRIORITYMODELISTENONLY	1
#DEFINE_CONSTANT	PRIORITYMODEOVERRIDE	2


#CATEGORY "0" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

DIGITAL_INPUT KnobRight;
DIGITAL_INPUT KnobLeft;
DIGITAL_INPUT Enter;
DIGITAL_INPUT Menu;
DIGITAL_INPUT More;
DIGITAL_INPUT RoomAndMore;
DIGITAL_INPUT RoomMode;
DIGITAL_INPUT Display;
DIGITAL_INPUT ExitGlobalVolume;
DIGITAL_INPUT ExitRoomMode;
DIGITAL_INPUT InterruptActive;
DIGITAL_INPUT DoNotDisturbEnabled;
DIGITAL_INPUT SleepEnabled;
DIGITAL_INPUT SleepWarning;
DIGITAL_INPUT PriorityModeControlOk;
DIGITAL_INPUT PriorityModeControlFailed;
DIGITAL_INPUT PriorityModeControlRemoved;
DIGITAL_INPUT SoftKey[4];
DIGITAL_INPUT SourceDisabled[MAXENTRIES];
DIGITAL_INPUT RoomButton[MAXROOMENTRIES];
ANALOG_INPUT SourceActive;
ANALOG_INPUT MaxRooms;
ANALOG_INPUT RoomSeed;
ANALOG_INPUT CurrentSleepTime;
ANALOG_INPUT NewSleepTime;
ANALOG_INPUT PriorityMode;
ANALOG_INPUT SourceType[MAXENTRIES];
ANALOG_INPUT RoomSource[MAXROOMENTRIES];
ANALOG_INPUT SourceOwner[MAXENTRIES];
STRING_INPUT SourceName$[MAXENTRIES][MAXLENGTH];
STRING_INPUT RoomName$[MAXROOMENTRIES][MAXLENGTH];
STRING_INPUT GroupName$[6][MAXLENGTH];

DIGITAL_OUTPUT EnterFb; 
DIGITAL_OUTPUT CurrentRoomOn;
DIGITAL_OUTPUT Disconnect;
DIGITAL_OUTPUT Connect;
DIGITAL_OUTPUT ConnectNewSource;
ANALOG_OUTPUT CurrentMenu; 
ANALOG_OUTPUT SourceOut;                  
ANALOG_OUTPUT SourceTypeOut;
ANALOG_OUTPUT NowPlayingIndex;
ANALOG_OUTPUT RoomSelectedFb;
ANALOG_OUTPUT UserAdjustIndex;
ANALOG_OUTPUT InstallerAdjustIndex;
ANALOG_OUTPUT OtherIndexOut;
ANALOG_OUTPUT NewSleepTimeOut;
ANALOG_OUTPUT PriorityModeSourceControlRequested;
ANALOG_OUTPUT PriorityModeSourceControlOverride;
STRING_OUTPUT SourceNameOut$; 
STRING_OUTPUT SerialOut$[10];
ANALOG_OUTPUT NewRoomSource[MAXROOMENTRIES];                  

INTEGER CurrentRoom;
INTEGER CurrentSource;
INTEGER TempSource;
INTEGER OtherIndex[4];
INTEGER TotalOtherItems;
INTEGER WaitingForSourceControl;
INTEGER CurrentMessage;

STRING OtherMenu$[4][8];


STRING_FUNCTION GetSourceOwnerName(INTEGER Index)
	{
	INTEGER i;
	
	if((SourceOwner[CurrentSource] & 0x03FF) > 0)		//Source in use by another room
		return(RoomName$[SourceOwner[CurrentSource] & 0x03FF]);
	else if((SourceOwner[CurrentSource] & 0xFD00) > 0)	//Source in use by one or more groups
		{
		for(i = 1 to 6)
			{
			if((SourceOwner[CurrentSource] & (0x0200 << i)) > 0)
				{
				Return(GroupName$[i]);
				break;
				}
			}
		}
	else
		{
		Return("another room.");
		}
	}
          
FUNCTION DisconnectRoom()
	{
	Disconnect = 1;
	Disconnect = 0;
	}
	
FUNCTION ConnectRoom(INTEGER Index)
	{
	RoomSelectedFb = Index;
	Connect = 1;
	Connect = 0;
	Processlogic();
	}
	
FUNCTION InitOtherMenu()
	{
	INTEGER i;
	
	OtherIndexOut = 0;
	i = 1;
	OtherIndex[i] = OTHERITEMGLOBAL;
	if(SleepEnabled = 1)
		{
		i = i + 1;
		OtherIndex[i] = OTHERITEMSLEEP;
		}
	if(DoNotDisturbEnabled = 1)
		{
		i = i + 1;
		OtherIndex[i] = OTHERITEMDONOTDISTURB;
		}
	TotalOtherItems = i;
	for(i = 1 to TotalOtherItems)
		SerialOut$[i] = OtherMenu$[OtherIndex[i]];
	if(TotalOtherItems < 4)
		{
		for(i = TotalOtherItems + 1 to 4)
			SerialOut$[i] = "";
		}
	}
	
Function RefreshOutput()
	{
	STRING Temp$[MAXLENGTH];
	
	SerialOut$[5] = RoomName$[CurrentRoom];
	if(CurrentSource > 0)
		{
		Temp$ = SourceName$[CurrentSource];
		SourceTypeOut = SourceType[CurrentSource];
		}
	else
		{
		Temp$ = "Off";
		SourceTypeOut = 0;
		}
	SerialOut$[7] = Temp$;
	SourceNameOut$ = Temp$;
	NowPlayingIndex = 0;
	NowPlayingIndex = CurrentSource;
	SourceOut = CurrentSource;
	SerialOut$[2] = "Source";
	if(CurrentSource > 0)
		{
		if((SourceType[CurrentSource] > 0) && (SourceType[CurrentSource] <> 6))
			{
			SerialOut$[1] = "Control";
			EnterFb = 1;
			}
		else
			{
			SerialOut$[1] = "";
			EnterFb = 0;
			}
		}
	else
		{
		SerialOut$[1] = "";
		EnterFb = 0;
		}			
	If((DoNotDisturbEnabled = 0) && (SleepEnabled = 0))
		{
		if(CurrentSource > 0)
			{
			SerialOut$[3] = "Global";
			SerialOut$[4] = "Off";
			}
		else
			{
			SerialOut$[3] = "";
			SerialOut$[4] = "On";
			}
		}
	else
		{
		if(CurrentSource > 0)
			{			
			SerialOut$[3] = "Other";
			SerialOut$[4] = "Off";
			}
		else
			{
			SerialOut$[3] = "";
			SerialOut$[4] = "On";
			}
		}
	OtherIndexOut = 0;			
	}

FUNCTION RefreshSourceList(INTEGER Index)
	{
	if(Index > 0)
		SerialOut$[10] = SourceName$[Index];
	else
		SerialOut$[10] = "No Source Selected";
	NowPlayingIndex = 0;
	NowPlayingIndex = Index;
	EnterFb = 1;
	}
	
FUNCTION RefreshUserAdjust()
	{
	SerialOut$[1] = "Bass";
	SerialOut$[2] = "Treble";
	SerialOut$[3] = "Bal";
	SerialOut$[4] = "Loud";
	EnterFb = 0;
	}

FUNCTION RefreshInstallerAdjust()
	{
	SerialOut$[1] = "MinV";
	SerialOut$[2] = "MaxV";
	SerialOut$[3] = "StartV";
	SerialOut$[4] = "Mono";
	EnterFb = 0;
	}
	
FUNCTION InitSleepMenu()
	{
	OtherIndexOut = OTHERITEMSLEEP;
	SerialOut$[5] = RoomName$[CurrentRoom];
	Makestring(SerialOut$[6], "%d:%02d", CurrentSleepTime / 60, CurrentSleepTime mod 60);
	SerialOut$[1] = "";
	SerialOut$[2] = "Adjust";
	SerialOut$[3] = "On";
	SerialOut$[4] = "Off";
	}    	
	
FUNCTION ProcessOtherMenuButton(INTEGER Index)
	{
	INTEGER Operation;
	
	if(OtherIndexOut = OTHERITEMSLEEP)
		{
		if(Index = 2)
			{
			OtherIndexOut = OTHERITEMSLEEPADJUST;
			Makestring(SerialOut$[6], "[%d:%02d]", NewSleepTime / 60, NewSleepTime mod 60);
			SerialOut$[2] = "";
			SerialOut$[3] = "Set";
			SerialOut$[4] = "Cancel";
			}
		}
	else if(OtherIndexOut = OTHERITEMSLEEPADJUST)
		{
		if(Index = 3)
			{
			NewSleepTimeOut = NewSleepTime;
			Call InitSleepMenu();
			}
		else if(Index = 4)
			{
			Call InitSleepMenu();
			}
		}
	else if(OtherIndexOut = OTHERITEMSLEEPWARNING)
		{
		if(Index = 2)
			{
			OtherIndexOut = OTHERITEMSLEEPADJUST;
			Makestring(SerialOut$[6], "[%d:%02d]", NewSleepTime / 60, NewSleepTime mod 60);
			SerialOut$[2] = "";
			SerialOut$[3] = "Set";
			SerialOut$[4] = "Cancel";
			}
		else if((Index = 3) || (Index = 4))
			{
			CurrentMenu = MENUMAIN;
			UserAdjustIndex = 0;
			InstallerAdjustIndex = 0;
			Call RefreshOutput();
			}
		}
	else
		{
		Operation = OtherIndex[Index];
		if((Operation = OTHERITEMGLOBAL) && (CurrentSource > 0) && (InterruptActive = 0))
			{
			CurrentMenu = MENUGLOBALVOLUME;
	        SerialOut$[6] = "Level";
	        SerialOut$[1] = "";
	        SerialOut$[2] = "";
	        SerialOut$[3] = "";
	        SerialOut$[4] = "";
	        EnterFb = 0;
	        }
	    else if(Operation = OTHERITEMSLEEP)
	    	{
	    	Call InitSleepMenu();
	    	}
	    else if(Operation = OTHERITEMDONOTDISTURB)
	    	{
	    	OtherIndexOut = OTHERITEMDONOTDISTURB;
	    	SerialOut$[1] = "";
	    	SerialOut$[2] = "";
	    	SerialOut$[3] = "On";
	    	SerialOut$[4] = "Off";
	    	}
	    }
	}		

FUNCTION WaitForSourceControlResponse()
	{
	Wait(200, SourceControlWait)
		{
		WaitingForSourceControl = FALSE;
		}
	}
	
PUSH KnobRight
	{
	INTEGER i;
	INTEGER Counter;
	
	if(CurrentMenu = MENUMAIN)
		{
		if(CurrentRoom < MAXROOMS)
			CurrentRoom = CurrentRoom + 1;
		else
			CurrentRoom = 1;
		CurrentSource = RoomSource[CurrentRoom];
		Call ConnectRoom(CurrentRoom);
		Call RefreshOutput();			
		}
	else if(CurrentMenu = MENUSOURCESELECT)
		{
		Counter = TempSource;
		TempSource = 0;
		for(i = 1 to MAXENTRIES)
			{
			if(Counter < MAXENTRIES)
				Counter = Counter + 1;
			else
				Counter = 1;
			if(SourceDisabled[Counter] = FALSE)
				{
				TempSource = Counter;
				break;
				}
			}
		Call RefreshSourceList(TempSource);			
		}
	}

PUSH KnobLeft
	{
	INTEGER i;
	INTEGER Counter;
	
	if(CurrentMenu = MENUMAIN)
		{
		if(CurrentRoom > 1)
			CurrentRoom = CurrentRoom - 1;
		else
			CurrentRoom = MAXROOMS;
		CurrentSource = RoomSource[CurrentRoom];
		Call ConnectRoom(CurrentRoom);
		Call RefreshOutput();						
		}
	else if(CurrentMenu = MENUSOURCESELECT)
		{
		Counter = TempSource;
		TempSource = 0;
		for(i = 1 to MAXENTRIES)
			{
			if(Counter > 1)
				Counter = Counter - 1;
			else
				Counter = MAXENTRIES;
			if(SourceDisabled[Counter] = FALSE)
				{
				TempSource = Counter;
				break;
				}
			}
		Call RefreshSourceList(TempSource);			
		}
	}
	
PUSH Enter
	{
	if(CurrentMenu = MENUMAIN)
		{
		if(((SourceType[CurrentSource] > 0) && (SourceType[CurrentSource] <= 5)) || ((SourceType[CurrentSource] >= 20) && (SourceType[CurrentSource] <= 27)))
			{
			if(PriorityMode = PRIORITYMODEOFF)
				{
				ConnectNewSource = 1;
				ConnectNewSource = 0;
				}
			else if((PriorityMode = PRIORITYMODELISTENONLY) || (PriorityMode = PRIORITYMODEOVERRIDE))
				{
				PriorityModeSourceControlRequested = 0;
				processlogic();
				WaitingForSourceControl = TRUE;
				PriorityModeSourceControlRequested = CurrentSource;
				Call WaitForSourceControlResponse();
				}
			}					
		}
	else if(CurrentMenu = MENUSOURCESELECT)	
		{
		CurrentSource = TempSource;
		NewRoomSource[CurrentRoom] = CurrentSource;
		CurrentMenu = MENUMAIN;
		Call RefreshOutput();
		}
	else if(CurrentMenu = MENUUSERADJUSTVALUE)
		{
		CurrentMenu = MENUUSERADJUST;
		UserAdjustIndex = 0;
		Call RefreshUserAdjust();
		}
	else if(CurrentMenu = MENUINSTALLERADJUSTVALUE)
		{
		CurrentMenu = MENUINSTALLERADJUST;
		InstallerAdjustIndex = 0;
		Call RefreshInstallerAdjust();
		}
	}
	
PUSH Softkey
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if(CurrentMenu = MENUMAIN)
		{
		if(Index = 1)
			{
			if(((SourceType[CurrentSource] > 0) && (SourceType[CurrentSource] <= 5)) || ((SourceType[CurrentSource] >= 20) && (SourceType[CurrentSource] <= 27)))
				{
				if(PriorityMode = PRIORITYMODEOFF)
					{
					ConnectNewSource = 1;
					ConnectNewSource = 0;
					}
				else if((PriorityMode = PRIORITYMODELISTENONLY) || (PriorityMode = PRIORITYMODEOVERRIDE))
					{
					PriorityModeSourceControlRequested = 0;
					Processlogic();
					WaitingForSourceControl = TRUE;
					PriorityModeSourceControlRequested = CurrentSource;
					Call WaitForSourceControlResponse();
					}
				}				
			}
		else if(Index = 2)
			{
			if(InterruptActive = 0)
				{
				CurrentMenu = MENUSOURCESELECT;
				TempSource = CurrentSource;
				SerialOut$[1] = "";
				SerialOut$[2] = "";
				SerialOut$[3] = "";
				SerialOut$[4] = "";
				Call RefreshSourceList(TempSource);
            	}
            }
        else if(Index = 3)
        	{
        	if((DoNotDisturbEnabled = 0) && (SleepEnabled = 0) && (CurrentSource > 0) && (InterruptActive = 0))
        		{
        		CurrentMenu = MENUGLOBALVOLUME;
        		SerialOut$[1] = "";
        		SerialOut$[2] = "";
        		SerialOut$[3] = "";
        		SerialOut$[4] = "";
        		SerialOut$[6] = "Level";
        		EnterFb = 0;
        		}
        	else if((DoNotDisturbEnabled = 1) || (SleepEnabled = 1))
        		{
        		CurrentMenu = MENUOTHER;
        		Call InitOtherMenu();
        		EnterFb = 0;
        		}
        	}
        else if(Index = 4)
        	{
        	if(CurrentSource > 0)
        		{
        		NewRoomSource[CurrentRoom] = 0;
        		}
        	else
        		{
        		CurrentRoomOn = 1;
        		CurrentRoomOn = 0;
        		}
        	}
        }
    else if(CurrentMenu = MENUOTHER)
    	{
    	Call ProcessOtherMenuButton(Index);
    	}
    else if(CurrentMenu = MENUUSERADJUST)
    	{
    	if(Index =1)
    		{
    		CurrentMenu = MENUUSERADJUSTVALUE;
    		UserAdjustIndex = ADJUSTBASS;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "";
    		SerialOut$[4] = "Flat";
    		SerialOut$[6] = "Bass";
    		EnterFb = 1;
    		}
    	else if(Index = 2)
    		{
    		CurrentMenu = MENUUSERADJUSTVALUE;
    		UserAdjustIndex = ADJUSTTREBLE;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "";
    		SerialOut$[4] = "Flat";
    		SerialOut$[6] = "Treble";
    		EnterFb = 1;
    		}
    	else if(Index = 3)
    		{
    		CurrentMenu = MENUUSERADJUSTVALUE;
    		UserAdjustIndex = ADJUSTBALANCE;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "";
    		SerialOut$[4] = "Center";
    		SerialOut$[6] = "Balance";
    		EnterFb = 1;
    		}
    	else if(Index = 4)
    		{
    		CurrentMenu = MENUUSERADJUSTVALUE;
    		UserAdjustIndex = ADJUSTLOUDNESS;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "On";
    		SerialOut$[4] = "Off";
    		SerialOut$[6] = "Loudness";
    		EnterFb = 1;
    		}
    	}
    else if(CurrentMenu = MENUINSTALLERADJUST)
    	{
    	if(Index =1)
    		{
    		CurrentMenu = MENUINSTALLERADJUSTVALUE;
    		InstallerAdjustIndex = ADJUSTMINV;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "";
    		SerialOut$[4] = "Reset";
    		SerialOut$[6] = "Min Volume";
    		EnterFb = 1;
    		}
    	else if(Index = 2)
    		{
    		CurrentMenu = MENUINSTALLERADJUSTVALUE;
    		InstallerAdjustIndex = ADJUSTMAXV;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "";
    		SerialOut$[4] = "Reset";
    		SerialOut$[6] = "Max Volume";
    		EnterFb = 1;
    		}
    	else if(Index = 3)
    		{
    		CurrentMenu = MENUINSTALLERADJUSTVALUE;
    		InstallerAdjustIndex = ADJUSTSTARTV;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "";
    		SerialOut$[4] = "Reset";
    		SerialOut$[6] = "Startup Volume";
    		EnterFb = 1;
    		}
    	else if(Index = 4)
    		{
    		CurrentMenu = MENUINSTALLERADJUSTVALUE;
    		InstallerAdjustIndex = ADJUSTMONO;
    		SerialOut$[1] = "";
    		SerialOut$[2] = "";
    		SerialOut$[3] = "Stereo";
    		SerialOut$[4] = "Mono";
    		SerialOut$[6] = "Stereo/Mono";
    		EnterFb = 1;
    		}
    	}
    else if(CurrentMenu = MENUMESSAGE)
    	{
    	if(CurrentMessage = 1)
    		{
    		if(Index = 4)
    			{
    			CurrentMenu = MENUMAIN;
				CurrentMessage = 0;
				UserAdjustIndex = 0;
				InstallerAdjustIndex = 0;
				Call RefreshOutput();
				}
			}
		else if(CurrentMessage = 2)
			{
			if(Index = 1)
				{
				CurrentMessage = 0;
				PriorityModeSourceControlOverride = 0;
				processlogic();
				PriorityModeSourceControlOverride = CurrentSource;
				ConnectNewSource = 1;
				ConnectNewSource = 0;
				}
			}
		}
    }
	
PUSH Menu
	{
	if((CurrentMenu = MENUSOURCESELECT) || (CurrentMenu = MENUUSERADJUST) || (CurrentMenu = MENUINSTALLERADJUST))
		{
		CurrentMenu = MENUMAIN;
		UserAdjustIndex = 0;
		InstallerAdjustIndex = 0;
		Call RefreshOutput();
		}
	else if(CurrentMenu = MENUGLOBALVOLUME)
		{
		if((SleepEnabled = 0) && (DoNotDisturbEnabled = 0))
			{
			CurrentMenu = MENUMAIN;
			UserAdjustIndex = 0;
			InstallerAdjustIndex = 0;
			Call RefreshOutput();
			}
		else
			{
			CurrentMenu = MENUOTHER;
			Call InitOtherMenu();
			}
		}
	else if(CurrentMenu = MENUOTHER)
		{
		if((OtherIndexOut = OTHERITEMSLEEP) || (OtherIndexOut = OTHERITEMDONOTDISTURB))
			{
			OtherIndexOut = 0;
			CurrentMenu = MENUOTHER;
			Call InitOtherMenu();
			}
		else if(OtherIndexOut = OTHERITEMSLEEPADJUST)
			{
			Call InitSleepMenu();
			}
		else
			{
			CurrentMenu = MENUMAIN;
			UserAdjustIndex = 0;
			InstallerAdjustIndex = 0;
			Call RefreshOutput();
			}
		}
	else if(CurrentMenu = MENUUSERADJUSTVALUE)
		{
		CurrentMenu = MENUUSERADJUST;
		UserAdjustIndex = 0;
		Call RefreshUserAdjust();
		}
	else if(CurrentMenu = MENUINSTALLERADJUSTVALUE)
		{
		CurrentMenu = MENUINSTALLERADJUST;
		InstallerAdjustIndex = 0;
		Call RefreshInstallerAdjust();
		}
	else if(CurrentMenu = MENUMESSAGE)
		{
		if((CurrentMessage = 1) || (CurrentMessage = 2))
			{
			CurrentMenu = MENUMAIN;
			CurrentMessage = 0;
			UserAdjustIndex = 0;
			InstallerAdjustIndex = 0;
			Call RefreshOutput();
			}
		}
	}
		
PUSH RoomMode
    {
    INTEGER Counter;
	INTEGER i;
	
	CurrentMenu = MENUMAIN;
	UserAdjustIndex = 0;
	InstallerAdjustIndex = 0;
	OtherIndexOut = 0;
	if((RoomSeed <= MaxRooms) && (RoomSeed > 0))
		CurrentRoom = RoomSeed;
	else
		CurrentRoom = 1;
	CurrentSource = RoomSource[CurrentRoom];
	Call ConnectRoom(CurrentRoom);
	Call RefreshOutput();
	}
	
PUSH ExitRoomMode
	{
	CurrentMenu = 0;
	UserAdjustIndex = 0;
	InstallerAdjustIndex = 0;
	OtherIndexOut = 0;
	Call DisconnectRoom();
	}

PUSH RoomButton
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if(Index <= MAXROOMS)
		{
		CurrentMenu = MENUMAIN;
		UserAdjustIndex = 0;
		InstallerAdjustIndex = 0;
		if(CurrentRoom <> Index)
			{
			CurrentRoom = Index;
			CurrentSource = RoomSource[CurrentRoom];
			Call ConnectRoom(CurrentRoom);
			Call InitOtherMenu();
			Call RefreshOutput();
			}
		else if((CurrentRoom = Index) && (RoomSource[Index] = 0))
			{
			CurrentRoomOn = 1;
			CurrentRoomOn = 0;
			}
		else
			{
			NewRoomSource[CurrentRoom] = 0;
			}
		}
	}
	
CHANGE RoomSource
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if((Index = CurrentRoom) && (InterruptActive = 0))
		{
		CurrentMenu = MENUMAIN;
		UserAdjustIndex = 0;
		InstallerAdjustIndex = 0;
		CurrentSource = RoomSource[CurrentRoom];
		Call RefreshOutput();
		}
	}
	
PUSH More
	{
	if(CurrentMenu = MENUMAIN)
		{
		CurrentMenu = MENUUSERADJUST;
		Call RefreshUserAdjust();
		}
	else if(CurrentMenu = MENUUSERADJUST)
		{
		CurrentMenu = MENUMAIN;
		UserAdjustIndex = 0;
		Call RefreshOutput();
		}
	}
	
CHANGE CurrentSleepTime
	{
	if((CurrentMenu = MENUOTHER) && ((OtherIndexOut = OTHERITEMSLEEP) || (OtherIndexOut = OTHERITEMSLEEPWARNING)))
		{
		Makestring(SerialOut$[6], "%d:%02d", CurrentSleepTime / 60, CurrentSleepTime mod 60);
		}
	}

CHANGE NewSleepTime
	{
	if((CurrentMenu = MENUOTHER) && (OtherIndexOut = OTHERITEMSLEEPADJUST))
		{
        Makestring(SerialOut$[6], "[%d:%02d]", NewSleepTime / 60, NewSleepTime mod 60);
        }
    }
    
PUSH SleepWarning
	{
	CurrentMenu = MENUOTHER;
	OtherIndexOut = OTHERITEMSLEEPWARNING;
	SerialOut$[5] = RoomName$[CurrentRoom];
	Makestring(SerialOut$[6], "%d:%02d", CurrentSleepTime / 60, CurrentSleepTime mod 60);
	SerialOut$[1] = "";
	SerialOut$[2] = "Adjust";
	SerialOut$[3] = "Ok";
	SerialOut$[4] = "Cancel";
	}
        
/*
PUSH More
	{
	if(CurrentMenu = MENUMAIN)
		{
		if(RoomSource[CurrentRoom] > 0)
			{
			CurrentMenu = MENUGLOBALVOLUME;
			}
		}
	else if(CurrentMenu = MENUGLOBALVOLUME)
		{
		CurrentMenu = MENUUSERADJUST;
		ScrollIndex = 1;
		ScrollMax = 4;
		Call RefreshUserAdjust(ScrollMax, ScrollIndex);
		}
	else if(CurrentMenu = MENUUSERADJUST)
		{
		CurrentMenu = MENUMAIN;
		UserAdjustIndex = 0;
		Call RefreshOutput();
		}
	}
*/	
/*
CHANGE UserMenuIn
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if((CurrentMenu = MENUUSERADJUSTVALUE) && (Index = UserAdjustIndex))
		Call RefreshUserAdjustMenu();
	}

CHANGE InstallerMenuIn
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if((CurrentMenu = MENUINSTALLERADJUSTVALUE) && (Index = InstallerAdjustIndex))
		Call RefreshInstallerAdjustMenu();
	}
*/	
PUSH RoomAndMore
	{
	if(CurrentMenu = MENUMAIN)
		{
		CurrentMenu = MENUINSTALLERADJUST;
		Call RefreshInstallerAdjust();
		}
	}
	
PUSH ExitGlobalVolume
	{
	if(CurrentMenu = MENUGLOBALVOLUME)
		{
		if((SleepEnabled = 0) && (DoNotDisturbEnabled = 0))
			{
			CurrentMenu = MENUMAIN;
			UserAdjustIndex = 0;
			InstallerAdjustIndex = 0;
			Call RefreshOutput();
			}
		else
			{
			CurrentMenu = MENUOTHER;
			Call InitOtherMenu();
			}
		}
	}
	
PUSH InterruptActive
	{
	if((CurrentMenu = MENUSOURCESELECT) && (RoomSource[CurrentRoom] > 0))
		{
		CurrentMenu = MENUMAIN;
		UserAdjustIndex = 0;
		InstallerAdjustIndex = 0;
		Call RefreshOutput();
		}
	}

PUSH PriorityModeControlOk
	{
	Cancelwait(SourceControlWait);
	if(WaitingForSourceControl = TRUE)
		{
		WaitingForSourceControl = FALSE;
		ConnectNewSource = 1;
		ConnectNewSource = 0;
		}
	}
	
PUSH PriorityModeControlFailed
	{
	CancelWait(SourceControlWait);
	if((WaitingForSourceControl = TRUE) && ((PriorityMode = PRIORITYMODELISTENONLY) || (PriorityMode = PRIORITYMODEOVERRIDE)))
		{
		CurrentMenu = MENUMESSAGE;
		SerialOut$[5] = "Notice";
		if(PriorityMode = PRIORITYMODELISTENONLY)				//Listen Only
			{
			CurrentMessage = 1;
			SerialOut$[6] = "This source is in use by";
			SerialOut$[7] = GetSourceOwnerName(CurrentSource);
			SerialOut$[8] = "Control not allowed.";
			SerialOut$[1] = "";
			SerialOut$[2] = "";
			SerialOut$[3] = "";
			SerialOut$[4] = "Ok";
			}
		else if(PriorityMode = PRIORITYMODEOVERRIDE)
			{
			CurrentMessage = 2;
			SerialOut$[6] = "This source is in use by";
			SerialOut$[7] = GetSourceOwnerName(CurrentSource);;
			SerialOut$[8] = "Press Control to override";
			SerialOut$[1] = "Control";
			SerialOut$[2] = "";
			SerialOut$[3] = "";
			SerialOut$[4] = "";
			}
		}
	}
/*	
PUSH PriorityModeControlRemoved
	{
	if(CurrentPage = PAGESOURCECONTROL)
		{
		CurrentPage = MENUMESSAGE;
		CurrentMessage = 3;
		SerialOut$[5] = "Notice";
		SerialOut$[6] = "Another room has taken";
		SerialOut$[7] = "control of this source.";
		SerialOut$[8] = "";
		SerialOut$[1] = "";
		SerialOut$[2] = "";
		SerialOut$[3] = "";
		SerialOut$[4] = "";
		SourceDisconnect = 1;
		SourceDisconnect = 0;
		delay(400);
		CurrentMessage = 0;
		LastSourceRequested = CurrentSource;
		Call InitMainMenu();
		}
	}		
*/
/*
CHANGE SourceGain
	{
	INTEGER Index;
	
	Index = getlastmodifiedarrayindex();
	if((Index = SourceOut) && (CurrentMenu = MENUADJUST))
		Call RefreshGainDisplay(SourceGain[Index]);
	}
*/	
FUNCTION Main()
	{
	CurrentMenu = 0;
	CurrentSource = 0;
	OtherMenu$[1] = "Global";
	OtherMenu$[2] = "Sleep";
	OtherMenu$[3] = "DND";
	OtherMenu$[4] = "";
	}
